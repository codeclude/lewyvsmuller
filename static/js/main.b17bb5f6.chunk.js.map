{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","className","lewygoalsJSON","require","mullergoalsJSON","allGroup","dataReady","map","grpName","name","values","mullergoals","d","round","goals","myColor","d3","domain","range","margin","width","height","Circles","ref","useRef","useEffect","svgElement","current","attr","append","x","length","call","y","line","selectAll","data","enter","style","datum","value","text","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b17bb5f6.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport './App.css';\nimport * as mullergoals from './mullergoals.json'\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Lewy vs MÃ¼ller</h1>\n      <Circles />\n    </div>\n  );\n}\n\nconst lewygoalsJSON = require('./lewygoals.json');\nconst mullergoalsJSON = require('./mullergoals.json');\n\nconst allGroup = [\"Lewy 20/21\", \"Muller 71/72\"]\n\nconst dataReady = allGroup.map( function(grpName) { // .map allows to do something for each element of the list\n  return {\n    name: grpName,\n    values: [lewygoalsJSON,mullergoals].map(function(d) {\n      return {round: d.round, goals: d.goals};\n    })\n  };\n});\n\nconst myColor = d3.scaleOrdinal()\n      .domain(allGroup)\n      .range(d3.schemeSet2);\n\nconst margin = {top: 10, right: 30, bottom: 30, left: 60},\n  width = 460 - margin.left - margin.right,\n  height = 400 - margin.top - margin.bottom;\n\nconst Circles = () => {\n\n  const ref = useRef();\n\n  useEffect(() => {\n    const svgElement = d3.select(ref.current)\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      var x = d3.scaleLinear()\n        .domain([0,mullergoalsJSON[mullergoalsJSON.length-1].round])\n        .range([ 0, width ]);\n\n      svgElement.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x));\n      // Add Y axis\n      var y = d3.scaleLinear()\n        .domain( [0, mullergoalsJSON[mullergoalsJSON.length-1].goals])\n        .range([ height, 0 ]);\n      svgElement.append(\"g\")\n        .call(d3.axisLeft(y));\n      // Add the line\n      const line = d3.line()\n        .x(function(d) { return x(+d.round) })\n        .y(function(d) { return y(+d.goals) })\n\n      svgElement.selectAll(\"myLines\")\n        .data(dataReady)\n        .enter()\n        .append(\"path\")\n          .attr(\"d\", function(d){ return line(d.values) } )\n          .attr(\"stroke\", function(d){ return myColor(d.name) })\n          .style(\"stroke-width\", 4)\n          .style(\"fill\", \"none\");\n\n      // First we need to enter in a group\n      svgElement.selectAll(\"myDots\")\n            .data(dataReady)\n            .enter()\n              .append('g')\n              .style(\"fill\", function(d){ return myColor(d.name) })\n            // Second we need to enter in the 'values' part of this group\n            .selectAll(\"myPoints\")\n            .data(function(d){ return d.values })\n            .enter()\n            .append(\"circle\")\n              .attr(\"cx\", function(d) { return x(d.round) } )\n              .attr(\"cy\", function(d) { return y(d.goals) } )\n              .attr(\"r\", 5)\n              .attr(\"stroke\", \"white\")\n\n      svgElement\n        .selectAll(\"myLabels\")\n        .data(dataReady)\n        .enter()\n          .append('g')\n          .append(\"text\")\n            .datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; }) // keep only the last value of each time series\n            .attr(\"transform\", function(d) { return \"translate(\" + x(d.value.round) + \",\" + y(d.value.goals) + \")\"; }) // Put the text at the position of the last point\n            .attr(\"x\", 12) // shift the text a bit more right\n            .text(function(d) { return d.name; })\n            .style(\"fill\", function(d){ return myColor(d.name) })\n            .style(\"font-size\", 15)\n  }, []);\n\n  return <svg ref={ref} />;\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}