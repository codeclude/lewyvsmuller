{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","className","lewygoalsJSON","require","mullergoalsJSON","values","name","allGroup","dataReady","map","grpName","find","vl","d","round","goals","myColor","d3","domain","range","margin","width","window","screen","height","Circles","ref","useRef","useEffect","svgElement","current","attr","append","x","length","call","y","line","selectAll","data","enter","style","datum","value","text","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1e27b3b7.chunk.js","sourcesContent":["import React, { useRef, useEffect } from \"react\";\nimport * as d3 from \"d3\";\nimport './App.css';\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Lewy vs MÃ¼ller</h1>\n      <Circles />\n    </div>\n  );\n}\n\nconst lewygoalsJSON = require('./lewygoals.json');\nconst mullergoalsJSON = require('./mullergoals.json');\nconst values = [{name: \"Lewy 20/21\", values: lewygoalsJSON},{name: \"Muller 71/72\", values: mullergoalsJSON}]\nconst allGroup = [\"Lewy 20/21\", \"Muller 71/72\"];\n\nconst dataReady = allGroup.map( function(grpName) { // .map allows to do something for each element of the list\n  return {\n    name: grpName,\n    values: values.find(vl => vl.name === grpName).values.map(function(d) {\n      return {round: d.round, goals: d.goals};\n    })\n  };\n});\n\nconst myColor = d3.scaleOrdinal()\n      .domain(allGroup)\n      .range(d3.schemeSet2);\n\nconst margin = {top: 20, right: 120, bottom: 30, left: 60},\n  width = (window.screen.width - margin.left - margin.right) * 0.85,\n  height = (window.screen.height - margin.top - margin.bottom) * 0.85;\n\nconst Circles = () => {\n\n  const ref = useRef();\n\n  useEffect(() => {\n    const svgElement = d3.select(ref.current)\n      .attr(\"width\", width + margin.left + margin.right)\n      .attr(\"height\", height + margin.top + margin.bottom)\n      .append(\"g\")\n      .attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n      var x = d3.scaleLinear()\n        .domain([0,mullergoalsJSON[mullergoalsJSON.length-1].round])\n        .range([ 0, width ]);\n\n      svgElement.append(\"g\")\n        .attr(\"transform\", \"translate(0,\" + height + \")\")\n        .call(d3.axisBottom(x));\n      // Add Y axis\n      var y = d3.scaleLinear()\n        .domain( [0, mullergoalsJSON[mullergoalsJSON.length-1].goals])\n        .range([ height, 0 ]);\n      svgElement.append(\"g\")\n        .call(d3.axisLeft(y));\n      // Add the line\n      const line = d3.line()\n        .x(function(d) { return x(+d.round) })\n        .y(function(d) { return y(+d.goals) })\n\n\n      svgElement.selectAll(\"myLines\")\n        .data(dataReady)\n        .enter()\n        .append(\"path\")\n          .attr(\"d\", function(d){ return line(d.values) } )\n          .attr(\"stroke\", function(d){ return myColor(d.name) })\n          .style(\"stroke-width\", 4)\n          .style(\"fill\", \"none\");\n\n      // First we need to enter in a group\n      svgElement.selectAll(\"myDots\")\n            .data(dataReady)\n            .enter()\n              .append('g')\n              .style(\"fill\", function(d){ return myColor(d.name) })\n            // Second we need to enter in the 'values' part of this group\n            .selectAll(\"myPoints\")\n            .data(function(d){ return d.values })\n            .enter()\n            .append(\"circle\")\n              .attr(\"cx\", function(d) { return x(d.round) } )\n              .attr(\"cy\", function(d) { return y(d.goals) } )\n              .attr(\"r\", 5)\n              .attr(\"stroke\", \"white\")\n            // .on(\"mouseover\", function(d) {\n            //     tooltip.transition()\n            //          .duration(200)\n            //          .style(\"opacity\", .9);\n            //     tooltip.html(d.x + \"-\" + d.y )\n            //          .style(\"left\", d3.select(this).attr(\"cx\") + \"px\")\n            //          .style(\"top\", d3.select(this).attr(\"cy\") + \"px\");\n            // })\n            // .on(\"mouseout\", function(d) {\n            //     tooltip.transition()\n            //          .duration(500)\n            //          .style(\"opacity\", 0)      \n            //   }\n            // )\n              \n\n      svgElement\n        .selectAll(\"myLabels\")\n        .data(dataReady)\n        .enter()\n          .append('g')\n          .append(\"text\")\n            .datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; }) // keep only the last value of each time series\n            .attr(\"transform\", function(d) { return \"translate(\" + x(d.value.round) + \",\" + y(d.value.goals) + \")\"; }) // Put the text at the position of the last point\n            .attr(\"x\", 12) // shift the text a bit more right\n            .text(function(d) { return d.name; })\n            .style(\"fill\", function(d){ return myColor(d.name) })\n            .style(\"font-size\", 15)\n  }, []);\n\n  return <svg ref={ref} />;\n};\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}