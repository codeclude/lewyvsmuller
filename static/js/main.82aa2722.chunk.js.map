{"version":3,"sources":["Ant.jsx","index.js"],"names":["COLORS","Page","useState","config","setConfig","useFetch","loading","data","mullergoalsJSON","lewygoalsJSON","useEffect","a","lewy","map","el","key","muller","sorted","sort","el1","el2","round","xField","yField","color","label","style","fontSize","fontWeight","textAlign","textBaseline","xAxis","yAxis","tooltip","customContent","title","element","goals","join","seriesField","legend","position","smooth","animation","appear","duration","fetchData","id","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQAIMA,EAAS,CACb,UAAW,WA6EEC,MA1Ef,WAAiB,IAAD,EACgBC,mBAAS,IADzB,mBACLC,EADK,KACGC,EADH,OAEoCC,YAAS,sFAAuF,GAAI,IAA5IC,EAFI,EAEJA,QAFI,IAEKC,KAAMC,OAFX,MAE6B,GAF7B,IAGyBH,YAAS,oFAAqF,GAAI,IAA/HE,KAAME,OAHF,MAGkB,GAHlB,EAoEZ,OA/DAC,qBAAU,WAAM,4CACd,kCAAAC,EAAA,sDACOL,IACOM,EAAOH,EAAcI,KAAI,SAAAC,GAAE,kCAASA,GAAT,IAAaC,IAAK,mBAC7CC,EAASR,EAAgBK,KAAI,SAAAC,GAAE,kCAASA,GAAT,IAAaC,IAAK,iBACjDR,EAHE,sBAGSK,GAHT,YAGkBI,IACpBC,EAASV,EAAKW,MAAK,SAACC,EAAKC,GAAN,OAAcD,EAAIE,MAAQD,EAAIC,SACvDjB,EAAU,CACNG,KAAMU,EACNK,OAAQ,QACRC,OAAQ,QACRC,MAAOxB,EACPyB,MAAO,CACHC,MAAM,CACJC,SAAU,GACVC,WAAY,IACZC,UAAW,SACXC,aAAc,WAGpBC,MAAO,CACHN,MAAO,CACLC,MAAO,CACLC,SAAU,MAIlBK,MAAO,CACHP,MAAO,CACLC,MAAO,CACLC,SAAU,MAIlBM,QAAS,CACPC,cAAe,SAACC,EAAO5B,GACrB,MAAM,uEAAN,OACyC4B,EADzC,mGAGM5B,EAAKM,KAAI,SAAAuB,GAAO,sIACyCA,EAAQZ,MADjD,sKAEcY,EAAQ7B,KAAKQ,IAF3B,8IAG+EqB,EAAQ7B,KAAK8B,MAH5F,+CAIVC,KAAK,KAPjB,mEAYJC,YAAa,MACbC,OAAQ,CAAEC,SAAU,OACpBC,QAAQ,EACRC,UAAW,CACTC,OAAQ,CACND,UAAW,UACXE,SAAU,SArD1B,4CADc,uBAAC,WAAD,wBA4DZC,KACD,CAACxC,EAASE,EAAiBC,KAEzBH,GAAWH,GAAUA,EAAOI,KACrB,qBAAKwC,GAAG,QAAR,SAAgB,cAAC,IAAD,eAAU5C,MAE1B,4CC1EhB6C,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,sBAAKH,GAAG,YAAR,UACE,oBAAIA,GAAG,QAAP,2CACA,cAAC,EAAD,SAGJI,SAASC,eAAe,W","file":"static/js/main.82aa2722.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport useFetch from 'use-http'\nimport { Line } from '@ant-design/charts';\n\nconst COLORS = [\n  '#2E6ABD', '#ED1248'\n]\n\nfunction Page() {\n    const [config, setConfig] = useState({});\n    const { loading, data: mullergoalsJSON = [] } = useFetch('https://raw.githubusercontent.com/korczynsk1/lewyvsmuller/main/src/mullergoals.json', {}, [])\n    const { data: lewygoalsJSON = [] } = useFetch('https://raw.githubusercontent.com/korczynsk1/lewyvsmuller/main/src/lewygoals.json', {}, [])\n\n    useEffect(() => {\n      async function fetchData() {\n        if (!loading) {\n              const lewy = lewygoalsJSON.map(el => ({...el, key: 'Lewandowski'}))\n              const muller = mullergoalsJSON.map(el => ({...el, key: 'Müller'}))\n              const data = [...lewy, ...muller];\n              const sorted = data.sort((el1, el2) => el1.round - el2.round);\n              setConfig({\n                  data: sorted,\n                  xField: 'round',\n                  yField: 'goals',\n                  color: COLORS,\n                  label: {\n                      style:{\n                        fontSize: 16,\n                        fontWeight: 300,\n                        textAlign: 'center',\n                        textBaseline: 'middle',\n                      }\n                  },\n                  xAxis: {\n                      label: {\n                        style: {\n                          fontSize: 26,\n                        }\n                      }\n                  },\n                  yAxis: {\n                      label: {\n                        style: {\n                          fontSize: 26,\n                        }\n                      }\n                  },\n                  tooltip: {\n                    customContent: (title, data) => {\n                      return `<div>\n                        <div class=\"g2-tooltip-title\">Round: ${title}</div>\n                        <ul class=\"g2-tooltip-list\">\n                          ${data.map(element => `<li class=\"g2-tooltip-list-item\">\n                          <span class=\"g2-tooltip-marker\" style=\"background-color: ${element.color}; width: 8px; height: 8px; border-radius: 50%; display: inline-block; margin-right: 8px;\"></span>\n                          <span class=\"g2-tooltip-name\">${element.data.key}</span>:\n                          <span class=\"g2-tooltip-value\" style=\"display: inline-block; float: right; margin-left: 30px;\">${element.data.goals}</span>\n                          </li>`).join(' ')}\n                        </ul>\n                      </div>`;\n                    }\n                  },\n                  seriesField: 'key',\n                  legend: { position: 'top' },\n                  smooth: false,\n                  animation: {\n                    appear: {\n                      animation: 'path-in',\n                      duration: 5000,\n                    },\n                  },\n              })\n            }\n        }\n        fetchData()\n    }, [loading, mullergoalsJSON, lewygoalsJSON])\n\n    if (!loading && config && config.data) {\n        return (<div id=\"chart\"><Line {...config} /></div>);\n    } else {\n        return (<p>Loading...</p>)\n    }\n}\nexport default Page;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Page from './Ant';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div id=\"container\">\n      <h1 id=\"title\">Lewy 20/21 vs Müller 71/72</h1>\n      <Page />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals"],"sourceRoot":""}