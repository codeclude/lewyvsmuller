{"version":3,"sources":["Ant.jsx","reportWebVitals.js","index.js"],"names":["Page","useState","config","setConfig","useFetch","loading","data","lewygoalsJSON","loading2","mullergoalsJSON","useEffect","lewy","map","el","key","muller","sorted","sort","el1","el2","round","console","log","xField","yField","height","window","outerHeight","label","style","fontSize","fontWeight","textAlign","textBaseline","xAxis","yAxis","seriesField","legend","position","smooth","animation","appear","duration","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","margin","document","getElementById"],"mappings":"4OAoIeA,MAhIf,WAAiB,IAAD,EACgBC,mBAAS,IADzB,mBACLC,EADK,KACGC,EADH,OAEkCC,YAAS,oFAAqF,GAAI,IAAxIC,EAFI,EAEJA,QAFI,IAEKC,KAAMC,OAFX,MAE2B,GAF3B,IAG8CH,YAAS,sFAAuF,GAAI,IAA7II,EAHL,EAGJH,QAHI,IAGeC,KAAMG,OAHrB,MAGuC,GAHvC,EAwHZ,OAnHAC,qBAAU,WACN,IAAKL,IAAYG,EAAU,CAgBvB,IAAMG,EAAOJ,EAAcK,KAAI,SAAAC,GAAE,kCAASA,GAAT,IAAaC,IAAK,YAC7CC,EAASN,EAAgBG,KAAI,SAAAC,GAAE,kCAASA,GAAT,IAAaC,IAAK,cAEjDE,EADI,sBAAOL,GAAP,YAAgBI,IACNE,MAAK,SAACC,EAAKC,GAAN,OAAcD,EAAIE,MAAQD,EAAIC,SACvDC,QAAQC,IAAI,SAAUN,GACtBb,EAAU,CACNG,KAAMU,EACNO,OAAQ,QACRC,OAAQ,QACRC,OAA2B,GAAnBC,OAAOC,YACfC,MAAO,CACHC,MAAM,CACJC,SAAU,GACVC,WAAY,IACZC,UAAW,SACXC,aAAc,WAGpBC,MAAO,CACHN,MAAO,CACLC,MAAO,CACLC,SAAU,MAIlBK,MAAO,CACHP,MAAO,CACLC,MAAO,CACLC,SAAU,MAIlBM,YAAa,MACbC,OAAQ,CAAEC,SAAU,OACpBC,QAAQ,EACRC,UAAW,CACTC,OAAQ,CACND,UAAW,UACXE,SAAU,WA0DvB,CAACrC,EAASG,EAAUD,EAAeE,KAEjCJ,IAAYG,GAAYN,GAAUA,EAAOI,MAC1Ce,QAAQC,IAAI,OAAQpB,GAEpB,cAAC,IAAD,eAAUA,KAEF,4CCrHDyC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,sBAAKzB,MAAO,CAAC0B,OAAQ,IAArB,UACE,+DACA,cAAC,EAAD,SAGJC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.788a4be4.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport useFetch from 'use-http'\nimport { Line } from '@ant-design/charts';\n\nfunction Page() {\n    const [config, setConfig] = useState({});\n    const { loading, data: lewygoalsJSON = [] } = useFetch('https://raw.githubusercontent.com/korczynsk1/lewyvsmuller/main/src/lewygoals.json', {}, [])\n    const { loading: loading2, data: mullergoalsJSON = [] } = useFetch('https://raw.githubusercontent.com/korczynsk1/lewyvsmuller/main/src/mullergoals.json', {}, [])\n\n    useEffect(() => {\n        if (!loading && !loading2) {\n            // const data = mullergoalsJSON.map(el => {\n            //     const lewyRound = lewygoalsJSON.find(lewy => lewy.round === el.round);\n            //     if(lewyRound) {\n            //         return {\n            //             round: el.round,\n            //             muller: el.goals,\n            //             lewy: lewyRound.goals\n            //         }\n            //     }\n            //     return {\n            //         round: el.round,\n            //         muller: el.goals,\n            //         lewy: 0\n            //     }\n            // });\n            const lewy = lewygoalsJSON.map(el => ({...el, key: 'lewy'}))\n            const muller = mullergoalsJSON.map(el => ({...el, key: 'muller'}))\n            const data = [...lewy, ...muller];\n            const sorted = data.sort((el1, el2) => el1.round - el2.round);\n            console.log('sorted', sorted)\n            setConfig({\n                data: sorted,\n                xField: 'round',\n                yField: 'goals',\n                height: window.outerHeight*0.9,\n                label: {\n                    style:{\n                      fontSize: 16,\n                      fontWeight: 300,\n                      textAlign: 'center',\n                      textBaseline: 'middle',\n                    }\n                },\n                xAxis: {\n                    label: {\n                      style: {\n                        fontSize: 26,\n                      }\n                    }\n                },\n                yAxis: {\n                    label: {\n                      style: {\n                        fontSize: 26,\n                      }\n                    }\n                },\n                seriesField: 'key',\n                legend: { position: 'top' },\n                smooth: false,\n                animation: {\n                  appear: {\n                    animation: 'path-in',\n                    duration: 5000,\n                  },\n                },\n            })\n            // setConfig({\n            //     data: [data, data],\n            //     xField: 'round',\n            //     yField: ['muller', 'lewy'],\n            //     geometryOptions: [\n            //     {\n            //         geometry: 'line',\n            //         smooth: false,\n            //         color: '#5AD8A6',\n            //         lineStyle: {\n            //         lineWidth: 3,\n            //         opacity: 0.5,\n            //         },\n            //         label: {\n            //         formatter: (datum) => {\n            //             return `${datum.muller}`;\n            //         },\n            //         },\n            //         point: {\n            //         shape: 'circle',\n            //         size: 4,\n            //         style: {\n            //             opacity: 0.5,\n            //             stroke: '#5AD8A6',\n            //             fill: '#fff',\n            //         },\n            //         },\n            //     },\n            //     {\n            //         geometry: 'line',\n            //         smooth: false,\n            //         color: '#5B8FF9',\n            //         label: {\n            //         formatter: (datum) => {\n            //             return `${datum.lewy}`;\n            //         },\n            //         },\n            //         lineStyle: {\n            //         lineWidth: 3,\n            //         lineDash: [5, 5],\n            //         },\n            //         point: {\n            //             shape: 'circle',\n            //             size: 4,\n            //             style: {\n            //             opacity: 0.5,\n            //             stroke: '#5B8FF9',\n            //             fill: '#fff',\n            //             },\n            //         },\n            //     },\n            //     ]\n            // })\n        }\n    }, [loading, loading2, lewygoalsJSON, mullergoalsJSON])\n\n    if (!loading && !loading2 && config && config.data) {\n        console.log('data', config);\n        return (\n        <Line {...config} />);\n    } else {\n        return (<p>Loading...</p>)\n    }\n}\nexport default Page;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Page from './Ant';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div style={{margin: 40}}>\n      <h1>Lewy 20/21 vs MÃ¼ller 71/72</h1>\n      <Page />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}