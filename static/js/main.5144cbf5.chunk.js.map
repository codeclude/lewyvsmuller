{"version":3,"sources":["StatsLoader.js","Ant.jsx","reportWebVitals.js","index.js"],"names":["tableToJson","table","data","i","rows","length","tableRow","rowData","j","cells","push","innerHTML","parseTableToGoals","parsedData","reduce","previousValue","currentValue","index","isNaN","round","goals","shift","parseData","url","a","fetch","then","text","res","DOMParser","parseFromString","document","seasonTable","querySelectorAll","closest","querySelector","tableAsJSON","Page","useState","config","setConfig","useFetch","loading","mullergoalsJSON","useEffect","lewygoals","lewy","map","el","key","muller","sorted","sort","el1","el2","xField","yField","height","window","outerHeight","label","style","fontSize","fontWeight","textAlign","textBaseline","xAxis","yAxis","seriesField","legend","position","smooth","animation","appear","duration","fetchData","console","log","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","margin","getElementById"],"mappings":"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","file":"static/js/main.5144cbf5.chunk.js","sourcesContent":["export const tableToJson = table => { \n    var data = [];\n    for (var i=1; i<table.rows.length; i++) { \n        var tableRow = table.rows[i]; \n        var rowData = []; \n        for (var j=0; j<tableRow.cells.length; j++) { \n            rowData.push(tableRow.cells[j].innerHTML);; \n        } \n        data.push(rowData); \n    } \n    return data;\n}\n\nexport const parseTableToGoals = table => {\n    const parsedData = table.reduce((previousValue, currentValue, index) => {\n      if (currentValue.length < 5) {\n        return previousValue;\n      } else if (isNaN(+currentValue[9])) {\n        previousValue.push({round: index+1, goals: previousValue[previousValue.length-1].goals})\n      }  else {\n        previousValue.push({round: index+1, goals: previousValue[previousValue.length-1].goals + +currentValue[9]})\n      }\n      return previousValue;\n    }, [{round:0, goals: 0}]);\n    \n    parsedData.shift();\n    \n    return parsedData;\n  }\n\n  export const parseData = async url => {\n    const document = await fetch(url)\n        .then((data) => data.text())\n        .then(res => {\n            var parser = new DOMParser();\n            return parser.parseFromString(res, 'text/html');\n        });\n    const seasonTable = document\n      .querySelectorAll('.table-header img[title=\"1. Bundesliga\"]')[0]\n      .closest('div.box')\n      .querySelector('div.responsive-table table');\n    \n    const tableAsJSON = tableToJson(seasonTable);\n    \n    return parseTableToGoals(tableAsJSON);\n  } ","import React, { useEffect, useState } from 'react';\nimport useFetch from 'use-http'\nimport { Line } from '@ant-design/charts';\nimport { parseData } from './StatsLoader';\n\nfunction Page() {\n    const [config, setConfig] = useState({});\n    const { loading, data: mullergoalsJSON = [] } = useFetch('https://raw.githubusercontent.com/korczynsk1/lewyvsmuller/main/src/mullergoals.json', {}, [])\n\n    useEffect(() => {\n      async function fetchData() {\n        if (!loading) {\n              const lewygoals = await parseData(\"https://www.transfermarkt.pl/robert-lewandowski/leistungsdaten/spieler/38253/plus/0?saison=2020\");\n              const lewy = lewygoals.map(el => ({...el, key: 'lewy'}))\n              const muller = mullergoalsJSON.map(el => ({...el, key: 'muller'}))\n              const data = [...lewy, ...muller];\n              const sorted = data.sort((el1, el2) => el1.round - el2.round);\n              setConfig({\n                  data: sorted,\n                  xField: 'round',\n                  yField: 'goals',\n                  height: window.outerHeight*0.9,\n                  label: {\n                      style:{\n                        fontSize: 16,\n                        fontWeight: 300,\n                        textAlign: 'center',\n                        textBaseline: 'middle',\n                      }\n                  },\n                  xAxis: {\n                      label: {\n                        style: {\n                          fontSize: 26,\n                        }\n                      }\n                  },\n                  yAxis: {\n                      label: {\n                        style: {\n                          fontSize: 26,\n                        }\n                      }\n                  },\n                  seriesField: 'key',\n                  legend: { position: 'top' },\n                  smooth: false,\n                  animation: {\n                    appear: {\n                      animation: 'path-in',\n                      duration: 5000,\n                    },\n                  },\n              })\n            }\n\n            // setConfig({\n            //     data: [data, data],\n            //     xField: 'round',\n            //     yField: ['muller', 'lewy'],\n            //     geometryOptions: [\n            //     {\n            //         geometry: 'line',\n            //         smooth: false,\n            //         color: '#5AD8A6',\n            //         lineStyle: {\n            //         lineWidth: 3,\n            //         opacity: 0.5,\n            //         },\n            //         label: {\n            //         formatter: (datum) => {\n            //             return `${datum.muller}`;\n            //         },\n            //         },\n            //         point: {\n            //         shape: 'circle',\n            //         size: 4,\n            //         style: {\n            //             opacity: 0.5,\n            //             stroke: '#5AD8A6',\n            //             fill: '#fff',\n            //         },\n            //         },\n            //     },\n            //     {\n            //         geometry: 'line',\n            //         smooth: false,\n            //         color: '#5B8FF9',\n            //         label: {\n            //         formatter: (datum) => {\n            //             return `${datum.lewy}`;\n            //         },\n            //         },\n            //         lineStyle: {\n            //         lineWidth: 3,\n            //         lineDash: [5, 5],\n            //         },\n            //         point: {\n            //             shape: 'circle',\n            //             size: 4,\n            //             style: {\n            //             opacity: 0.5,\n            //             stroke: '#5B8FF9',\n            //             fill: '#fff',\n            //             },\n            //         },\n            //     },\n            //     ]\n            // })\n        }\n        fetchData()\n    }, [loading, mullergoalsJSON])\n\n    if (!loading && config && config.data) {\n        console.log('data', config);\n        return (\n        <Line {...config} />);\n    } else {\n        return (<p>Loading...</p>)\n    }\n}\nexport default Page;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Page from './Ant';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <div style={{margin: 40}}>\n      <h1>Lewy 20/21 vs MÃ¼ller 71/72</h1>\n      <Page />\n    </div>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}